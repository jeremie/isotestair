<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:flexunit="flexunit.flexui.*" 
  xmlns:merapi="merapi.*"  layout="absolute" width="448" height="558">
	<!--STATES-->
	<mx:states>
		<mx:State name="sql"> 
			<mx:RemoveChild target="{responseText}"/>
			<mx:RemoveChild target="{form1}"/>
			<mx:AddChild position="lastChild">
				<mx:TextArea width="397" height="157" x="19.5" y="58" id="requette"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:Button label="Executer" x="19.5" y="224" click="execute()" id="button2"/>
			</mx:AddChild>
			<mx:AddChild position="lastChild">
				<mx:DataGrid width="397" height="151" x="19.5" y="327" id="sqlresult">
					
				</mx:DataGrid>
			</mx:AddChild>
			<mx:RemoveChild target="{connect}"/>
			<mx:AddChild position="lastChild">
				<mx:TextArea x="107.5" y="225" width="309" height="81" id="responseSQL"/>
			</mx:AddChild>
			<mx:RemoveChild target="{canvas1}"/>
			<mx:RemoveChild target="{canvas2}"/>
			<mx:RemoveChild target="{typeParameter}"/>
			<mx:RemoveChild target="{button1}"/>
			<mx:AddChild position="lastChild">
				<mx:Button x="19" y="284" label="Cancel" click="cancelQuery()"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvas3}" position="lastChild">
				<mx:Button x="10" y="462" label="Retour" click="currentState='';"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{canvas3}" position="lastChild">
				<mx:Label text="SQL :" x="19.5" y="43"/>
			</mx:AddChild>
			<mx:AddChild relativeTo="{button2}" position="before">
				<mx:Label text="SQL :" x="19.5" y="43"/>
			</mx:AddChild>
			<mx:RemoveChild target="{canvas4}"/>
			
		</mx:State>
		<mx:State name="file">
			<mx:RemoveChild target="{canvas3}"/>
			<mx:SetProperty target="{canvas4}" name="label" value="Fichier"/>
		</mx:State>
	</mx:states>
	
<mx:Script>
		<![CDATA[
		
			import merapi.messages.Message;
			import mx.controls.Alert; 
			import util.DataSource;
			import util.TypeBD;
			import flexunit.framework.TestSuite;
			import mx.collections.ArrayCollection;
			import mx.events.FileEvent;
			import mx.rpc.events.ResultEvent;
			import flash.filesystem.File;
    
			private var ds : String;
			private var source:File;	
			
			private function connection():void{
				
			var type:String=type2.selectedItem.valueOf().label as String;
				switch(type){
					case "Oracle": 
					ds = login2.text + "##" + mdp.text + "##" + (type2.selectedItem.valueOf().num) + "##" + "jdbc:oracle:thin:@"+hostOracle.text+":"+portOracle.text+":"+sidOracle.text;
					break;
					case "SQL Server": 
						var db:String ="";
						if(cmbDBSqlserver.selectedItem != null){
							db =  ";database=" +cmbDBSqlserver.selectedItem.valueOf().NAME as String;
						}
						ds = login2.text + "##" + mdp.text + "##" + (type2.selectedItem.valueOf().num) + "##" + "jdbc:sqlserver://"+ipSQLserver.text+":"+portSQLserver.text+db;
					break;
					case "MySQL": 
						var db:String ="";
						if(cmbDBMysql.selectedItem != null){
							db =  "/" +cmbDBMysql.selectedItem.valueOf().Database as String;
						}
						ds = login2.text + "##" + mdp.text + "##" + (type2.selectedItem.valueOf().num) + "##" + "jdbc:mysql://"+ipMySQL.text+":"+portMySQL.text+db;
					break;
					case "PostgreSQL": 
						var db:String ="";
						if(cmbDBPostgresql.selectedItem != null){
							db =  "/" +cmbDBPostgresql.selectedItem.valueOf().datname as String;
						}
						ds = login2.text + "##" + mdp.text + "##" + (type2.selectedItem.valueOf().num) + "##" + "jdbc:postgresql://"+ipPostgreSQL.text+":"+portPostgreSQL.text+db;
						
					break;
				}
				currentState='sql';
			}
			private function cancelQuery():void{
				bridge.sendMessage( new Message( 'sqlRequest_cancel', "stop" ) );
			}
			
			private var typeProviders:ArrayCollection = new ArrayCollection(
				[new TypeBD(0,"Oracle"),new TypeBD(2,"SQL Server"),new TypeBD(3,"MySQL"),new TypeBD(4,"PostgreSQL")]);

			private function load():void {
				var st : String = new String();
				st = "";
				
			var type:String=type2.selectedItem.valueOf().label as String;
				switch(type){
					case "Oracle": 
					st = st + login2.text + "##" + mdp.text + "##" + (type2.selectedItem.valueOf().num) + "##" + "jdbc:oracle:thin:@"+hostOracle.text+":"+portOracle.text+":"+sidOracle.text;
			bridge.sendMessage( new Message( 'dataSource', st ) );
					break;
					case "SQL Server": 
					st = st + login2.text + "##" + mdp.text + "##" + (type2.selectedItem.valueOf().num) + "##" + "jdbc:sqlserver://"+ipSQLserver.text+":"+portSQLserver.text;
			bridge.sendMessage( new Message( 'dataSource', st ) );
					break;
					case "MySQL": 
						st = st + login2.text + "##" + mdp.text + "##" + (type2.selectedItem.valueOf().num) + "##" + "jdbc:mysql://"+ipMySQL.text+":"+portMySQL.text;
			bridge.sendMessage( new Message( 'dataSource', st ) );
					break;
					case "PostgreSQL": 
						st = st + login2.text + "##" + mdp.text + "##" + (type2.selectedItem.valueOf().num) + "##" + "jdbc:postgresql://"+ipPostgreSQL.text+":"+portPostgreSQL.text+"/postgres";
			bridge.sendMessage( new Message( 'dataSource', st ) );
					break;
				}
			}
			var count : int=0;
			private function result(event : ResultEvent): void{
			  	
		
				if ((event.result as Message).type=='testBase'){
					responseText.text += bridge.lastMessage.data.toString() + 
	  									 '\n';
	  				if (bridge.lastMessage.data.toString()=="Succes")
	  				{
	  					connect.enabled=true;
	  				}
	  			}else if ((event.result as Message).type=='sqlResult'){
					loadFile();


	  			}
	  			
	  			else if((event.result as Message).type=='sqlInfo'){
	  				responseSQL.text+= bridge.lastMessage.data.toString() + 
	  									 '\n';
	  			}
	  			else if((event.result as Message).type=='DBSqlServer'){
					var gridResult:ArrayCollection = ArrayCollection(bridge.lastMessage.data);
	  				cmbDBSqlserver.dataProvider=gridResult;
	  			}
	  			else if((event.result as Message).type=='DBMySql'){
					var gridResult:ArrayCollection = ArrayCollection(bridge.lastMessage.data);
	  				cmbDBMysql.dataProvider=gridResult;
	  			}
	  			else if((event.result as Message).type=='DBPostgreSql'){
					var gridResult:ArrayCollection = ArrayCollection(bridge.lastMessage.data);
	  				cmbDBPostgresql.dataProvider=gridResult;
	  			}
			}
			private function selectChange():void{
				var type:String=type2.selectedItem.valueOf().label as String;
				switch(type){
					case "Oracle": 
					typeParameter.selectedIndex=0;
					break;
					case "SQL Server": 
					typeParameter.selectedIndex=2;
					break;
					case "MySQL": 
					typeParameter.selectedIndex=1;
					break;
					case "PostgreSQL": 
					typeParameter.selectedIndex=3;
					break;
				}
			}
			private function execute():void{
				bridge.sendMessage( new Message( 'sqlRequest_request', ds + "##" + requette.text ) );
			}
			private function getDBSqlServer():void{
				var st: String = new String();
				st += login2.text + "##" + mdp.text + "##" + (type2.selectedItem.valueOf().num) + "##" + "jdbc:sqlserver://"+ipSQLserver.text+":"+portSQLserver.text+";database=master";
				bridge.sendMessage( new Message( 'dataSource_getDBSqlServer', st ) );
			}
			private function getDBMySql():void{
				var st: String = new String();
				st = st + login2.text + "##" + mdp.text + "##" + (type2.selectedItem.valueOf().num) + "##" + "jdbc:mysql://"+ipMySQL.text+":"+portMySQL.text;
				bridge.sendMessage( new Message( 'dataSource_getDBMySql', st ) );
			}
			private function getDBPostgreSql():void{
				var st: String = new String();
				st = st + login2.text + "##" + mdp.text + "##" + (type2.selectedItem.valueOf().num) + "##" + "jdbc:postgresql://"+ipPostgreSQL.text+":"+portPostgreSQL.text+"/postgres";
				bridge.sendMessage( new Message( 'dataSource_getDBPostgre', st ) );
			}
			
            
            private function loadFile():void{
            	            	
            	var myFile:File = File.desktopDirectory.resolvePath("DATA.dat");
                var fileStream:FileStream = new FileStream();
                fileStream.open(myFile, FileMode.READ);
                var toto:ArrayCollection = fileStream.readObject();
	  			sqlresult.dataProvider=toto;
                
            }
          private function chooseSource():void
            {
                if (source == null) { source = new File(); }
                source.addEventListener(Event.SELECT, sourceSelectHandler);
                source.browseForOpen("Choose file to compress", [new FileFilter("Excel files", "*.xls"),new FileFilter("CSV files", "*.csv"), new FileFilter("Access", "*.png"), new FileFilter("All files", "*.xls; *.png; *.csv")]);
            }
            private function sourceSelectHandler(event:Event):void
            {
                sourceTxt.text = source.nativePath;
               
            }
		]]>
	</mx:Script>
	<merapi:BridgeInstance id="bridge" result="result(event)" />
	<mx:TabNavigator x="10" y="10" width="422" height="527">
		<mx:Canvas label="Base de donnÃ©es" width="100%" height="100%" id="canvas3">
	
	
	<mx:Form x="50" y="34" width="330" height="117" id="form1" borderStyle="solid" borderColor="#DEDCDC">
		<mx:FormItem label="Login">
			<mx:TextInput id="login2"/>
		</mx:FormItem>
		<mx:FormItem label="Mot de passe">
			<mx:TextInput id="mdp"/>
		</mx:FormItem>
		<mx:FormItem label="Type">
			<mx:ComboBox id="type2" dataProvider="{typeProviders}" labelField="label" change="selectChange()" width="161">
			
			</mx:ComboBox>
		</mx:FormItem>
	</mx:Form>
	<mx:Button label="Connect" enabled="true" id="connect" click="connection()" x="308" y="314"/>
	<mx:Button label="Test"   click="load()" x="50" y="314" id="button1"/>
	<mx:TextArea x="50" y="353" width="330" height="125" id="responseText"/>
	<mx:ViewStack x="50" y="159"  width="330" height="147" id="typeParameter">
		<mx:Canvas label="View 1" width="100%" height="100%" id="canvas1" borderStyle="solid" borderColor="#DEDCDC">
			<mx:Form x="10" y="10" width="310" height="127">
				<mx:FormItem label="Host" >
					<mx:TextInput id="hostOracle" text="localhost"/>
				</mx:FormItem>
				<mx:FormItem label="Port" >
					<mx:TextInput id="portOracle" text="1521"/>
				</mx:FormItem>
				<mx:FormItem label="Sid" >
					<mx:TextInput id="sidOracle" text="xe"/>
				</mx:FormItem>
			</mx:Form>
		</mx:Canvas>
		<mx:Canvas label="mysql" width="100%" height="100%" id="canvas2" borderStyle="solid" borderColor="#DEDCDC">
			<mx:Form x="28" y="10" width="292" height="83">
				<mx:FormItem label="Host">
					<mx:TextInput id="ipMySQL" text="localhost" width="190"/>
				</mx:FormItem>
				<mx:FormItem label="Port">
					<mx:TextInput id="portMySQL"  text="3306" width="191"/>
				</mx:FormItem>
			</mx:Form>
			<mx:Button x="28" y="101" label="Choose DB" width="96" click="getDBMySql()"/>
			<mx:ComboBox x="132" y="101" width="149" id="cmbDBMysql" labelField="Database"></mx:ComboBox>
		</mx:Canvas>
		<mx:Canvas label="sqlserver" width="100%" height="100%" borderStyle="solid" borderColor="#DEDCDC">
			<mx:Form x="28" y="10" width="278" height="84">
				<mx:FormItem label="Host">
					<mx:TextInput id="ipSQLserver" text="localhost" width="197"/>
				</mx:FormItem>
				<mx:FormItem label="Port">
					<mx:TextInput id="portSQLserver" text="1433" width="197"/>
				</mx:FormItem>
			</mx:Form>
			<mx:Button x="28" y="102" label="Retrieve DB" click="getDBSqlServer()"/>
			<mx:ComboBox x="131" y="102" width="157" id="cmbDBSqlserver" labelField="NAME"></mx:ComboBox>
		</mx:Canvas>
		<mx:Canvas label="postgresql" width="100%" height="100%" borderStyle="solid" borderColor="#DEDCDC">
			<mx:Form x="28" y="10" width="278" height="84">
				<mx:FormItem label="Host">
					<mx:TextInput id="ipPostgreSQL" text="localhost" width="197"/>
				</mx:FormItem>
				<mx:FormItem label="Port">
					<mx:TextInput id="portPostgreSQL" text="5432" width="197"/>
				</mx:FormItem>
			</mx:Form>
			<mx:Button x="28" y="102" label="Retrieve DB" click="getDBPostgreSql()"/>
			<mx:ComboBox x="131" y="102" width="157" id="cmbDBPostgresql" labelField="datname"></mx:ComboBox>
		</mx:Canvas>
	</mx:ViewStack>
	
		</mx:Canvas>
		<mx:Canvas label="Fichier" width="100%" height="100%" id="canvas4">
			<mx:Label y="33" text="Source file:" left="32" width="68"/>
			<mx:TextInput y="31" right="163" left="108" id="sourceTxt" editable="false"/>
			<mx:Button y="31" label="Choose" right="84" click="chooseSource();"/>
		</mx:Canvas>
	</mx:TabNavigator>
	
	
</mx:WindowedApplication>
